version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: dianabot_postgres
    environment:
      POSTGRES_DB: dianabot
      POSTGRES_USER: dianabot_user
      POSTGRES_PASSWORD: dianabot_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dianabot_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:7
    container_name: dianabot_mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: dianabot
      MONGO_INITDB_ROOT_PASSWORD: dianabot_password
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27017:27017"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: dianabot_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  bot:
    build: .
    container_name: dianabot_bot
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - ENVIRONMENT=development
      - POSTGRES_HOST=postgres
      - MONGO_HOST=mongodb
      - REDIS_HOST=redis
    env_file:
      - .env
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    command: python -m bot.main

  api:
    build: .
    container_name: dianabot_api
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - ENVIRONMENT=development
      - POSTGRES_HOST=postgres
      - MONGO_HOST=mongodb
      - REDIS_HOST=redis
    env_file:
      - .env
    ports:
      - "8001:8001"
    volumes:
      - .:/app
    command: uvicorn api.main:app --host 0.0.0.0 --port 8001 --reload

volumes:
  postgres_data:
  mongodb_data:
  redis_data: